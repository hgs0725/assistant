<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel='stylesheet' href='/stylesheets/login_style.css' />
    <link rel='stylesheet' href='/stylesheets/chat_style.css' />
    <script src="https://kit.fontawesome.com/51db22a717.js" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-2.2.1.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Alata&display=swap" rel="stylesheet">
 
</head>

<body>
    <div class="chat_wrap">
        <div class="header">
            <nav>
                <span>Menu1</span>
                <span>Menu2</span>
                <span>Menu3</span>
              </nav>
        </div>
        <div class="chat">
            <ul>
                <!-- 동적 생성 -->
            </ul>
        </div>
        <div class="input-div">
            <textarea placeholder="Press Enter for send message."></textarea>
        </div>

        <!-- format -->

        <div class="chat format">
            <ul>
                <li>
                    <div class="sender">
                        <span></span>
                    </div>
                    <div class="message">
                        <span></span>
                    </div>
                </li>
            </ul>
        </div>
    </div>
    <script>
        const Chat = (function () {
            window.onload = function () {

                eventQuery('welcomeToMyWebsite');

            }
            const myName = "User";

            // init 함수
            function init() {
                // enter 키 이벤트
                $(document).on('keydown', 'div.input-div textarea', function (e) {
                    if (e.keyCode == 13 && !e.shiftKey) {
                        e.preventDefault();
                        const message = $(this).val();

                        // 메시지 전송
                        sendMessage(message);
                        textQuery(message);
                        // 입력창 clear
                        clearTextarea();
                    }
                });
            }

            // 메세지 태그 생성
            function createMessageTag(LR_className, senderName, message) {
                // 형식 가져오기
                let chatLi = $('div.chat.format ul li').clone();

                // 값 채우기
                chatLi.addClass(LR_className);
                chatLi.find('.sender span').text(senderName);
                chatLi.find('.message span').text(message);

                return chatLi;
            }

            // 메세지 태그 append
            function appendMessageTag(LR_className, senderName, message) {
                const chatLi = createMessageTag(LR_className, senderName, message);

                $('div.chat:not(.format) ul').append(chatLi);
                
                // 스크롤바 아래 고정
                var scrollHeight = $('div.chat').prop('scrollHeight')
                console.log(scrollHeight);
                window.scrollTo(0,scrollHeight);
            }



            // 메세지 전송
            function sendMessage(message) {
                // 서버에 전송하는 코드로 후에 대체
                data = {
                    senderName: 'User',
                    message: message
                }
                // 통신하는 기능이 없으므로 여기서 receive
                resive(data);
            }

            const textQuery = async (text) => {

                //  First  Need to  take care of the message I sent     
                let conversation = {
                    senderName: 'User',
                    content: {
                        text: {
                            text: text
                        }
                    }
                }


                // We need to take care of the message Chatbot sent 
                const textQueryVariables = {
                    text
                }
                try {
                    const response = await axios.post('/api/dialogflow/textQuery', textQueryVariables)

                    conversation = {
                        senderName: 'bot',
                        message: response.data.fulfillmentText
                    }
                    resive(conversation);

                } catch (error) {
                    conversation = {
                        senderName: 'bot',
                        message: error
                    }
                    resive(conversation);


                }


            }

            const eventQuery = async (event) => {


                // We need to take care of the message Chatbot sent 
                const eventQueryVariables = {
                    event
                }

                const response = await axios.post('/api/dialogflow/eventQuery', eventQueryVariables)


                conversation = {
                    senderName: 'bot',
                    message: response.data.fulfillmentText
                }
                resive(conversation);


            }

            // 메세지 입력박스 내용 지우기
            function clearTextarea() {
                $('div.input-div textarea').val('');
            }

            // 메세지 수신
            function resive(data) {
                const LR = (data.senderName != myName) ? "right" : "left";
                appendMessageTag(LR, data.senderName, data.message);
            }

            return {
                'init': init
            };
        })();

        $(function () {
            Chat.init();
        });


    </script>
</body>

</html>